// Marked.js stub - for markdown rendering
// In production, use the actual marked.js library from CDN
// This is a simplified version for demonstration

function renderMarkdown(text) {
    // Basic markdown rendering
    let html = text;
    
    // Headers
    html = html.replace(/^### (.*$)/gim, '<h3>$1</h3>');
    html = html.replace(/^## (.*$)/gim, '<h2>$1</h2>');
    html = html.replace(/^# (.*$)/gim, '<h1>$1</h1>');
    
    // Bold
    html = html.replace(/\*\*(.+?)\*\*/g, '<strong>$1</strong>');
    
    // Italic
    html = html.replace(/\*(.+?)\*/g, '<em>$1</em>');
    
    // Links
    html = html.replace(/\[([^\]]+)\]\(([^)]+)\)/g, '<a href="$2">$1</a>');
    
    // Lists
    html = html.replace(/^\* (.+)/gim, '<li>$1</li>');
    html = html.replace(/(<li>.*<\/li>)/s, '<ul>$1</ul>');
    
    // Line breaks
    html = html.replace(/\n/g, '<br>');
    
    // Code blocks
    html = html.replace(/```([^`]+)```/g, '<pre><code>$1</code></pre>');
    html = html.replace(/`([^`]+)`/g, '<code>$1</code>');
    
    // Tables (basic)
    html = html.replace(/\|(.+)\|/g, function(match) {
        const cells = match.split('|').filter(c => c.trim());
        if (cells.length > 0) {
            return '<tr>' + cells.map(c => `<td>${c.trim()}</td>`).join('') + '</tr>';
        }
        return match;
    });
    
    // Wrap tables
    if (html.includes('<tr>')) {
        html = html.replace(/(<tr>.*<\/tr>)/s, '<table>$1</table>');
    }
    
    return html;
}

// Make it globally available
if (typeof window !== 'undefined') {
    window.renderMarkdown = renderMarkdown;
}